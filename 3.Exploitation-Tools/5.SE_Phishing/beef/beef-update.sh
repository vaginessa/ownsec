#!/bin/bash

bold=$(tput bold)
normal=$(tput sgr0)

GITREPO=https://github.com/beefproject/beef.git
BRANCH=master
GITREPOROOT=/opt/ITSEC/3.Exploitation-Tools/5.SE_Phishing/beef/beefproject/beef
GITCONFDIR=/opt/ITSEC/3.Exploitation-Tools/5.SE_Phishing/beef/beefproject/beef/.git
GITCLONEDIR=/opt/ITSEC/3.Exploitation-Tools/5.SE_Phishing/beef/beefproject
EXECUTEABLE1=beef.sh
EXECUTEABLE2=beef
BINDIR=/usr/local/bin
DSKTPFLS=/opt/ownsec/0.Initial/usrlcl/.local/share/applications/3.Exploitation-Tools/5.SE_Phishing
DSKTPFLSDEST=/home/$USER/.local/share/applications/3.Exploitation-Tools/5.SE_Phishing
DSKTPFL=beef.desktop
APTLSTDIR=/opt/ownsec/0.Initial/lst/apt
GITSBMDLINIT () {
	git submodule init
	git submodule update --recursive
	sudo updatedb && sudo ldconfig
}
GITRESET () {
	git clean -f
	git fetch origin
	git reset --hard origin/$BRANCH
	git pull
}

echo "${bold}
 ____  _____ _____ _____ 
| __ )| ____| ____|  ___|
|  _ \|  _| |  _| | |_   
| |_) | |___| |___|  _|  
|____/|_____|_____|_|    
            
UPDATE CHECK
${normal}"

if [ ! -d $GITCONFDIR ]

then

mkdir -p $GITCLONEDIR
cd $GITCLONEDIR
git clone -b $BRANCH $GITREPO

else

echo "${bold}REPO EXISTS, skip clone...${normal}"

fi

cd $GITREPOROOT

if git checkout $BRANCH &&
    git fetch origin $BRANCH &&
    [ `git rev-list HEAD...origin/$BRANCH --count` != 0 ] &&
    git merge origin/$BRANCH
then
    
cd $GITREPOROOT

. ~/.bashrc
eval "$(rbenv init -)"
yes "N" | rbenv install 2.3.0
rbenv rehash
sudo updatedb
sudo ldconfig

GITRESET
GITSBMDLINIT
rbenv shell 2.3.0
gem install bundler
#bundle
bundle update
bundle install

chmod +x $EXECUTEABLE2

echo '#!/bin/bash

cd /opt/ITSEC/3.Exploitation-Tools/5.SE_Phishing/beef/beefproject/beef
. ~/.bashrc
eval "$(rbenv init -)"
yes "N" | rbenv install 2.3.0
rbenv rehash
sudo updatedb
sudo ldconfig
rbenv shell 2.3.0
./beef "$@"' > $EXECUTEABLE1

chmod +x $GITREPOROOT/$EXECUTEABLE1
sudo rm -f $BINDIR/$EXECUTEABLE2
sudo ln -s $GITREPOROOT/$EXECUTEABLE1 $BINDIR/$EXECUTEABLE2

mkdir -p $DSKTPFLSDEST
cp $DSKTPFLS/$DSKTPFL $DSKTPFLSDEST/$DSKTPFL

echo "${bold}
UPDATED
${normal}"

else

echo "${bold}
UP TO DATE
${normal}"
	
fi

